id: exposed-webpack-sourcemap-secrets
info:
  name: Exposed Webpack Source Map Revealing Sensitive Information
  author: XPLTR
  tags: info-disclosure, sourcemap, webpack, frontend, sensitive, secrets, misconfiguration, overlooked
  severity: medium # गंभीरता पाई गई जानकारी के आधार पर Critical भी हो सकती है।
  description: |
    यह टेम्पलेट सार्वजनिक रूप से उजागर Webpack Source Map फ़ाइलों (.js.map) की जाँच करता है
    जो मूल अनमिनिफ़ाइड JavaScript सोर्स कोड से संवेदनशील हार्डकोडेड क्रेडेंशियल, API Keys, 
    आंतरिक पाथ, या गोपनीय टिप्पणियाँ उजागर कर सकती हैं। यह एक गंभीर सूचना प्रकटीकरण भेद्यता को इंगित करता है।
    कई हैकर्स केवल Source Map के अस्तित्व की जाँच करते हैं, लेकिन उसके कंटेंट को गहराई से स्कैन नहीं करते।
  reference:
    - https://owasp.org/www-project-top-ten/2021/A01_2021-Broken_Access_Control
    - https://owasp.org/www-project-top-ten/2017/A03_2017-Sensitive_Data_Exposure
    - https://docs.snyk.io/learn/security-vulnerabilities/exposed-source-maps
    - https://portswigger.net/research/hunting-for-secrets-in-javascript-files

http:
  - method: GET
    # यहां सामान्य Source Map पाथ्स की सूची है। आप अपनी Recon के आधार पर इसे बढ़ा सकते हैं।
    path:
      - "{{BaseURL}}/static/js/main.chunk.js.map" # Create React App का सामान्य पाथ
      - "{{BaseURL}}/assets/js/bundle.js.map"     # एक और सामान्य बंडल पाथ
      - "{{BaseURL}}/dist/app.min.js.map"         # सामान्य प्रोडक्शन बंडल
      - "{{BaseURL}}/js/app.js.map"
      - "{{BaseURL}}/main.js.map"
      - "{{BaseURL}}/bundle.js.map"
      - "{{BaseURL}}/vendors.js.map"


    matchers-condition: and # सभी शर्तें पूरी होनी चाहिए
    matchers:
      - type: status
        status:
          - 200 # पुष्टि करें कि Source Map फ़ाइल मिली और सुलभ है
      - type: word
        words:
          - '"sourcesContent"' # Source Maps में अक्सर यह key होती है जिसमें मूल सोर्स कोड होता है
          - '"mappings"'       # Source Maps में यह भी एक महत्वपूर्ण key है
        part: body # सुनिश्चित करें कि यह एक वैध Source Map संरचना है
        condition: and # दोनों 'sourcesContent' और 'mappings' होने चाहिए

      - type: regex
        part: body
        # Source Map के कंटेंट के भीतर संवेदनशील पैटर्न की तलाश करें
        regex:
          # सामान्य Secrets और क्रेडेंशियल
          - "(?i)(api_key|secret_key|password|token|jwt_secret|access_token|refresh_token)"
          # क्लाउड और DB क्रेडेंशियल
          - "(?i)(aws_access_key_id|aws_secret_access_key|s3_bucket|db_password|db_user|rds_password|azure_storage_account|google_api_key|firebase_api_key)"
          # आंतरिक सिस्टम और URLs
          - "(?i)(internal_api_url|jira\\.[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}|confluence\\.[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}|internal_dashboard|admin_panel_url)"
          # संवेदनशील फाइलें और कॉन्फ़िगरेशन
          - "(?i)(config\\.json|\\.env|settings\\.py|application\\.properties)"
          # अन्य संवेदनशील जानकारी
          - "(?i)(\\badmin\\b|\\bcredentials\\b|\\bprod_db_user\\b|\\btest_user_password\\b|\\bprivate_key\\b|\\bconfidential\\b|\\bdo\\s+not\\s+distribute\\b|//\\s*TODO:|bugzilla\\.[a-zA-Z0-9-]+\\.[a-zA-Z]{2,})"
          # विशिष्ट Token/UUID पैटर्न (लंबी alphanumeric स्ट्रिंग)
          - "([A-Za-z0-9]{32,}|[A-Za-z0-9+/]{32,}={0,2})" # 32+ अक्षर या base64-encoded दिखने वाली स्ट्रिंग

        condition: or # यदि इनमें से कोई भी संवेदनशील पैटर्न मिलता है तो मैच करें
        case-insensitive: true # केस-असंवेदनशील मिलान

    # वैकल्पिक रूप से, मिली संवेदनशील स्ट्रिंग्स को निकालने के लिए extractors जोड़ सकते हैं:
    # extractors:
    #   - type: regex
    #     regex:
    #       - "(?i)(api_key|secret_key|password|token|jwt_secret|aws_access_key_id|aws_secret_access_key|db_password|internal_api_url|private_key)"
    #     name: found_sensitive_info
    #     part: body
    #     case-insensitive: true
    #     group: 0 # पूरा मैच कैप्चर करें
